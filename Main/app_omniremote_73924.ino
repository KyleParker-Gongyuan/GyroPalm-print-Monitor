// Begin AutoGenerated Includes - DO NOT EDIT BELOW

lv_task_t* tmr_73924;
void lv_task_73924(struct _lv_task_t *data) {
    loop_73924();
}
// End AutoGenerated Includes - DO NOT EDIT ABOVE

#include <ArduinoJson.h>
#include <WiFi.h>

// Wifi Settings.
//const char* ssid = "****WIFI-SSID****";
const char* ssid = "1035Bush";
//const char* password = "****WIFI-PASSWORD****";
const char* password = "1035Bush";

// LABEL
static lv_obj_t * tempo_label;
static lv_obj_t * print_status_label;
static lv_obj_t * print_time_label;
static lv_obj_t * hello_label;


//static lv_obj_t * hello_label;


static void text_changer_73924(lv_task_t * t); // IDK WTF THIS DO

// CONNECTING TO WIFI
const char * dot_char[] = {"atempting to connect", "atempting to connect.", "atempting to connect..", "atempting to connect...", NULL}; // this is so stupid

int getArrayLength = sizeof(dot_char) / sizeof(dot_char[0]);

int cur_dot = 0;


// Octoprint Settings
//String    OCTO_API_KEY = "**********************************";  // Via: OctoPrint > Settings > API
String    OCTO_API_KEY = "9D9286F461ED4149AA5C736DEDF102AB";  // Via: OctoPrint > Settings > API
int       OCTO_PORT = 5000;
//String    OCTO_HOST = "192.168.0.44";
String    OCTO_HOST = "192.168.5.234";

// Printer status update interval
long interval = 6000; // Every 6 seconds

// Test button for sending g-code commands etc. 
const int buttonPin = 0; // Boot button for now (ESP32 Dev Board (& Wemos Lolin)). Boards without an extra button will need a breadboard etc. 

// status of printer
String printerStatusString = "";

// ##### END SETTINGS


//////////////////////////////////////////////////////////////////////////////// 
WiFiClient client;
String ipStr = "";
// Button press detection
int buttonState = 0;
int lastButtonState = HIGH;   // the previous reading from the input pin
// Debounce
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers
// For status request timer.
long previousMillis = 0;    

/////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////

// Begin AutoGenerated Globals - DO NOT EDIT BELOW
enum Screen_73924 { SCR_73924_HOME, SCR_73924_WATCH };	//Screen indexes
lv_obj_t *screen_73924[2];    //screen pointers
GyroPalmLVGL form_73924[2];   //screen helper methods
Screen_73924 curScreen_73924 = SCR_73924_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE

// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW


static void btn_event_handler_73924(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
		Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen_73924)
        {
            case SCR_73924_HOME:
			    if (btnName == "Button"){ 
                    showApp_73924(SCR_73924_WATCH);
                }
			    if (btnName == "Buttz"){ 
                    wifiStart();
                    //getPrinterState();
                }
			
            break;

            case SCR_73924_WATCH:
			    if (btnName == "HomeXY"){ // homeing

                    //getPrinterState(); 
                    // getTemperatures();
                    goHomeXY();
                    // goHomeXYZ();
                    // goForLevel();
                } 
                if (btnName == "getState"){
                    getPrinterState(); // doing it manully for now 
                }
                if (btnName == "getTemp"){
                    getTemperatures();
                }
                if (btnName == "currentTime"){
                    getCurrentJobStatus();
                }
            break;


            default: break;
		}
	}
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

// ##### SETTINGS


// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp_73924(int page) {
    if ((Screen_73924) page != curScreen_73924) {
        form_73924[curScreen_73924].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
		case SCR_73924_HOME:
        {
            //Draw screen UI
            curScreen_73924 = (Screen_73924) page;
            form_73924[curScreen_73924].init(screen_73924[curScreen_73924]);  //now defining screen items
            form_73924[curScreen_73924].createBar(barTask, lv_update_task);
            form_73924[curScreen_73924].setTime(gplm.getTime());

			hello_label = form_73924[curScreen_73924].createLabel(0, -37, " World");    //show element

            lv_label_set_long_mode(hello_label, LV_LABEL_LONG_BREAK); // WTF do I need this?

            lv_obj_set_width(hello_label, 100);

            lv_label_set_text(hello_label, "0"); 

            form_73924[curScreen_73924].createButton(58, 67, "buttz", btn_event_handler_73924, true, 59);    //show element
            
			form_73924[curScreen_73924].createButton(-58, 67, "Button", btn_event_handler_73924, true, 59);    //show element

            form_73924[curScreen_73924].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;

		case SCR_73924_WATCH:
        {
            //Draw screen UI
            curScreen_73924 = (Screen_73924) page;
            form_73924[curScreen_73924].init(screen_73924[curScreen_73924]);  //now defining screen items
            form_73924[curScreen_73924].createBar(barTask, lv_update_task);
            form_73924[curScreen_73924].setTime(gplm.getTime());

			tempo_label = form_73924[curScreen_73924].createLabel(-77, -37, "");    //show element (tempo)

			print_status_label = form_73924[curScreen_73924].createLabel(0, -37, "");    //show element (is printing)

			print_time_label = form_73924[curScreen_73924].createLabel(77, -37, "das time");    //show element (print percent/ time)

			form_73924[curScreen_73924].createButton(-58, 67, "getState", btn_event_handler_73924, true, 98);    //show element

			form_73924[curScreen_73924].createButton(58, 67, "HomeXY", btn_event_handler_73924, true, 98);    //show element

			form_73924[curScreen_73924].createButton(-58, 0, "getTemp", btn_event_handler_73924, true, 98);    //show element

			form_73924[curScreen_73924].createButton(58, 0, "currentTime", btn_event_handler_73924, true, 98);    //show element

            form_73924[curScreen_73924].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;


        default: break;
    }
    form_73924[curScreen_73924].setBarCallback(hide_73924);
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

void show_73924() {
	Serial.begin(115200);

    //wifiStart();
    
    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
    form[curScreen].clearLauncher();
    showApp_73924(curScreen_73924);
    tmr_73924 = lv_task_create(lv_task_73924, 100, LV_TASK_PRIO_LOWEST, NULL);
    // End AutoGenerated Setup - DO NOT EDIT ABOVE
    
    wifiStart();

}

void loop_73924() {
	//Serial.println("Hello World");
	delay(1000);
	
    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
    // End AutoGenerated Loop - DO NOT EDIT ABOVE

    // Calls /api/printer?exclude=sd every 6 seconds. [interval(ms)]

    unsigned long currentMillis = millis();
    //if(isOnline() && currentMillis - previousMillis > interval) { // make sure that the app is connected

/*
    if (isOnline){

        if(currentMillis - previousMillis > interval) {
        previousMillis = currentMillis;   
        // Do something... 
        getPrinterState();
        }
    }
*/

}


/*
  ESPOctoClient v0.1   - @kosso : Jan 28, 2018
  --------------------------------------------

  A basic Wifi client to connect to a local OctoPrint system running on a Raspberry Pi 
  and make requests to the OctoPrint REST API.

  See API docs: http://docs.octoprint.org/en/master/api/

  Some test request exmaple methods are down at the bottom of the sketch.
 
 */


//////////////////////////////////////////////////////////////////////////////////////

void wifiStart(){
     

    // Connect to WiFi
    WiFi.begin(ssid, password);
    lv_label_set_text(hello_label, "start connecting");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        lv_label_set_text(hello_label, dot_char[0] );
        cur_dot++;
        if (cur_dot == 5){
            cur_dot = 0;
        }
        Serial.print("."); //label

    }
    Serial.println(""); //label
    Serial.println("WiFi connected"); //label
    lv_label_set_text(hello_label, "WiFi connected");

    // Print the IP address
    IPAddress ip = WiFi.localIP(); // maybe not needed

    ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);

    Serial.println("Ready..."); //label
    Serial.println("IP: " + ipStr);  //label
}

////////////////////////////////////////////////////////////////////////// end setup()


//////////////////////////////////////////////////////////////////////////////////////

/* OLD LOOP
void loop_73924() {
  
  // Listen for a button push
  int reading = digitalRead(buttonPin); //(this will be a UI button not an irl button)
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  

  
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;
      if (buttonState == LOW) {//btn
        Serial.println("BUTTON PRESSED! GO HOME XY");
        // getPrinterState(); 
        // getTemperatures();
        goHomeXY();
        // goHomeXYZ();
        // goForLevel();
        
      }
    }
  }
  

  // lastButtonState = reading;


}
*/
//////////////////////////////////////////////////////////////////////////////// end loop()

// Methods 

boolean isOnline(){ // WTF DOES THIS DO??
  if (WiFi.status() != WL_CONNECTED) { // ok this says not conneted to wifi butt whats it used for?
    return false;
  } else {
    return true;
  }
}

// DONT TOUCH !!!!
void parsePrinterStateJSON(String jsonStr){
  DynamicJsonBuffer  jsonBuffer( jsonStr.length() );
  char *json_c_str = &jsonStr[0u];
  JsonObject& root = jsonBuffer.parseObject(json_c_str);
  if (!root.success()) {
    Serial.println("parseJSON() failed"); //label
    return;
  }

  const char* printer_state_text = root["state"]["text"];
  double printer_temperature_bed = root["temperature"]["bed"]["actual"];
  double printer_temperature_bed_target = root["temperature"]["bed"]["target"];
  double printer_temperature_tool0 = root["temperature"]["tool0"]["actual"];
  double printer_temperature_tool0_target = root["temperature"]["tool0"]["target"];

  boolean is_printing = root["state"]["flags"]["printing"];
  boolean is_ready = root["state"]["flags"]["ready"];
  boolean is_paused = root["state"]["flags"]["paused"];
  boolean is_operational = root["state"]["flags"]["operational"];
  boolean has_error = root["state"]["flags"]["error"];
  
  Serial.print("printer_state_text: ");
  Serial.println(printer_state_text);
  
  Serial.print("printer_temperature_bed: ");
  Serial.println(printer_temperature_bed);
  Serial.print("printer_temperature_bed_target: ");
  Serial.println(printer_temperature_bed_target);
  Serial.print("printer_temperature_tool0: ");
  Serial.println(printer_temperature_tool0);
  Serial.print("printer_temperature_tool0_target: ");
  Serial.println(printer_temperature_tool0_target);

  String status_text = ""; // all of this should be a string
  if(is_ready){
    status_text = "PRINTER READY";
  }
  if(is_printing){
    status_text = "PRINTING...";
  }
  if(is_paused){
    status_text = "PAUSED";
  }
  if(has_error){
    status_text = "ERROR!!!!!!";
    // probably do something like stop...
     
  }
  Serial.println("status_text: " + status_text);

  if(is_printing){
     getCurrentJobStatus();
  }

  // set some UI... 
  
}

// DONT TOUCH !!!!
void parseJobJSON(String jsonStr){
  DynamicJsonBuffer  jsonBuffer( jsonStr.length() );
  char *json_c_str = &jsonStr[0u];
  JsonObject& root = jsonBuffer.parseObject(json_c_str);
  if (!root.success()) {
    Serial.println("parseJSON() failed");
    return;
  }

  const char* printer_job_name = root["job"]["file"]["name"];
  double printer_job_progress = root["progress"]["completion"];

  Serial.print("printer_job_name: ");
  Serial.println(printer_job_name);
  Serial.print("printer_job_progress: ");
  Serial.println(printer_job_progress);
  
  // set some UI... 
    lv_label_set_text(print_time_label, reinterpret_cast<const char*>(&printer_job_progress)); // current progress
    // <reinterpret_cast<const char*>(&printer_job_progress) //? this should convert the double to a char

  
}


// DONT TOUCH !!!!
String octoRequest(String uri, String method, String postData = ""){
  // HTTPClient request helper
  IPAddress addr;
  addr.fromString(OCTO_HOST);
  
  Serial.println("\nConnecting to OctoPrint server...");  
  if (!client.connect(addr, OCTO_PORT)){
    Serial.println("octoRequest Connection failed!");
    return "";
  } else {
    Serial.println("Connected to server!");
    
    client.println(method + " "+uri+" HTTP/1.1");
    client.println("Host: " + OCTO_HOST);
    client.println("Cache-Control: no-cache");
    client.println("X-Api-Key: " + OCTO_API_KEY);
    if(method=="POST"){
      Serial.println("postData JSON: "+postData);
      client.println("Content-Type: application/json");
      client.print("Content-Length: ");
      client.println(postData.length());
    }
    client.println("");
    if(method=="POST"){
      client.println(postData);
    }
    client.println("");
    while (client.connected()) {
      String line = client.readStringUntil('\n');
      // Serial.println("> "+line);   
      if (line == "\r") {
        // Serial.println("headers received");
        break;
      }
    }
    String response;
    while (client.available()) {
      response = client.readString();
    }
    client.stop();
    return response;    
  }
}

// into a label
void getPrinterState(){
  Serial.println("getPrinterStatus");
  String json = octoRequest("/api/printer?exclude=sd", "GET");
  // Serial.print("STATUS: length: ");
  // Serial.println(json.length()); // test this to make sure we give the DynamicJsonBuffer enough
  // Serial.println(json);
  parsePrinterStateJSON(json);
  
}

// into a label
void getCurrentJobStatus(){
    Serial.println("getCurrentJobStatus");
    String json = octoRequest("/api/job", "GET");
    // Serial.println(json);
    parseJobJSON(json);

    lv_label_set_text(print_status_label, json.c_str()); // current status

}

// into a label
void getTemperatures(){
    Serial.println("getTemperatures");
    String json = octoRequest("/api/printer?exclude=sd,state", "GET");
    // Serial.println("TEMPS: ");
    Serial.println(json);
    //printerStatusString = json;

    lv_label_set_text(tempo_label, json.c_str()); // set the tempoture

    // parse the json and do something...
}


// Some basic G-Code commands.
void goHomeX(){
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 X0\",\"G90\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}
void goHomeY(){
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 Y0\",\"G90\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}
void goHomeZ(){
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 Z0\",\"G90\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}

void goHomeXY(){
  Serial.println("goHomeXY");
  // using printhead method
  //String jsonCMD = "{\"command\":\"home\",\"axes\":[\"x\",\"y\"]}";
  //String json = octoRequest("/api/printer/printhead", "POST", jsonCMD);
  // Direct G-code : Home X and Y
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 X0 Y0\",\"G90\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}

void goHomeXYZ(){
  Serial.println("goHomeXYZ");
  // Direct G-code : Home X, Y and Z
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 X0 Y0\",\"G28 Z0\",\"G90\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}

void goForLevel(){
  Serial.println("goForLevel");
  // Homes X & Y, then travels to 60,60. Homes Z then disbales motors. 
  String jsonCMD = "{\"commands\":[\"G91\",\"G28 X0 Y0\",\"G90\",\"G1 X60.0 Y60.0 F3000\",\"G28 Z0\",\"M18\"]}";
  String json = octoRequest("/api/printer/command", "POST", jsonCMD);
}


// Done.
// That's it... Now go and add a screen or something! ;) 

// Cheers!  @kosso : 2018.


void hide_73924(int barIntent) {
    if (barIntent == BAR_SWIPE_LEFT) {
        lv_task_del(tmr_73924); //removes the task
        showApp(SCR_HOME);
    }
}
